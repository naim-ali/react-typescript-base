{"remainingRequest":"/Users/technologyteam/Development/Projects/Orion/node_modules/thread-loader/dist/cjs.js??ref--4-1!/Users/technologyteam/Development/Projects/Orion/node_modules/ts-loader/index.js??ref--4-2!/Users/technologyteam/Development/Projects/Orion/src/app/components/AppContainer.tsx","dependencies":[{"path":"/Users/technologyteam/Development/Projects/Orion/src/app/components/AppContainer.tsx","mtime":1596055527960},{"path":"/Users/technologyteam/Development/Projects/Orion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/technologyteam/Development/Projects/Orion/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/technologyteam/Development/Projects/Orion/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICJ0c2xpYiI7CmltcG9ydCBSZWFjdCBmcm9tICJyZWFjdCI7CmltcG9ydCAiLi4vYXNzZXRzL2Nzcy9zaXRlLnNjc3MiOwppbXBvcnQgQXBwIGZyb20gIi4vQXBwIjsKaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgfSBmcm9tICdoaXN0b3J5JzsKaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAicmVhY3Qtcm91dGVyLWRvbSI7CmltcG9ydCB7IEFwb2xsb1Byb3ZpZGVyIH0gZnJvbSAnQGFwb2xsby9jbGllbnQnOwppbXBvcnQgeyBBcG9sbG9DbGllbnQsIGNyZWF0ZUh0dHBMaW5rLCBJbk1lbW9yeUNhY2hlIH0gZnJvbSAnQGFwb2xsby9jbGllbnQnOwppbXBvcnQgeyBzZXRDb250ZXh0IH0gZnJvbSAnQGFwb2xsby9jbGllbnQvbGluay9jb250ZXh0JzsKdmFyIGh0dHBMaW5rID0gY3JlYXRlSHR0cExpbmsoewogICAgdXJpOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwL2dyYXBocWwnLAp9KTsKdmFyIGF1dGhMaW5rID0gc2V0Q29udGV4dChmdW5jdGlvbiAoXywgX2EpIHsKICAgIHZhciBoZWFkZXJzID0gX2EuaGVhZGVyczsKICAgIC8vIGdldCB0aGUgYXV0aGVudGljYXRpb24gdG9rZW4gZnJvbSBsb2NhbCBzdG9yYWdlIGlmIGl0IGV4aXN0cwogICAgdmFyIHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2F1cmlnbjovL2F1dGgvand0Jyk7CiAgICAvLyByZXR1cm4gdGhlIGhlYWRlcnMgdG8gdGhlIGNvbnRleHQgc28gaHR0cExpbmsgY2FuIHJlYWQgdGhlbQogICAgcmV0dXJuIHsKICAgICAgICBoZWFkZXJzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaGVhZGVycyksIHsgYXV0aG9yaXphdGlvbjogdG9rZW4gPyAiQmVhcmVyICIgKyB0b2tlbiA6ICIiIH0pCiAgICB9Owp9KTsKdmFyIGNsaWVudCA9IG5ldyBBcG9sbG9DbGllbnQoewogICAgbGluazogYXV0aExpbmsuY29uY2F0KGh0dHBMaW5rKSwKICAgIGNhY2hlOiBuZXcgSW5NZW1vcnlDYWNoZSgpCn0pOwp2YXIgQXBwQ29udGFpbmVyID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEFwb2xsb1Byb3ZpZGVyLCB7IGNsaWVudDogY2xpZW50IH0sCiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB9LAogICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEFwcCwgbnVsbCkpKSk7Cn07CmV4cG9ydCBkZWZhdWx0IEFwcENvbnRhaW5lcjsK"},{"version":3,"file":"/Users/technologyteam/Development/Projects/Orion/src/app/components/AppContainer.tsx","sourceRoot":"","sources":["/Users/technologyteam/Development/Projects/Orion/src/app/components/AppContainer.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,yBAAyB,CAAC;AACjC,OAAO,GAAG,MAAM,OAAO,CAAA;AACvB,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAA;AAC9C,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC7E,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AAEzD,IAAM,QAAQ,GAAG,cAAc,CAAC;IAC9B,GAAG,EAAE,+BAA+B;CACrC,CAAC,CAAC;AAEH,IAAM,QAAQ,GAAG,UAAU,CAAC,UAAC,CAAC,EAAE,EAAW;QAAT,oBAAO;IACvC,+DAA+D;IAC/D,IAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACxD,8DAA8D;IAC9D,OAAO;QACL,OAAO,wBACF,OAAO,KACV,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,YAAU,KAAO,CAAC,CAAC,CAAC,EAAE,GAC9C;KACF,CAAA;AACH,CAAC,CAAC,CAAC;AAEH,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC;IAC9B,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC/B,KAAK,EAAE,IAAI,aAAa,EAAE;CAC3B,CAAC,CAAC;AAGH,IAAM,YAAY,GAAG;IACjB,OAAO,CACP,oBAAC,cAAc,IAAC,MAAM,EAAE,MAAM;QAC1B,oBAAC,MAAM,IAAC,OAAO,EAAE,oBAAoB,EAAE;YACnC,oBAAC,GAAG,OAAE,CACD,CACI,CAChB,CAAA;AACL,CAAC,CAAA;AAED,eAAe,YAAY,CAAC","sourcesContent":["import React from \"react\";\nimport \"../assets/css/site.scss\";\nimport App from \"./App\"\nimport { createBrowserHistory } from 'history'\nimport { Router } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:3000/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('aurign://auth/jwt');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\n\nconst AppContainer = () => {\n    return (\n    <ApolloProvider client={client}>\n        <Router history={createBrowserHistory()}>\n            <App/>\n        </Router>\n    </ApolloProvider>\n    )\n}\n\nexport default AppContainer;"]}]}